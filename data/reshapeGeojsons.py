import geojson
import json

# greabbed bounding box function from here:
# https://gis.stackexchange.com/questions/313011/convert-geojson-object-to-bounding-box-using-python-3-6
def bbox(coord_list):
     box = []
     for i in (0,1):
         res = sorted(coord_list, key=lambda x:x[i])
         box.append((res[0][i],res[-1][i]))
     ret = [[box[0][0], box[1][0]], [box[0][1],box[1][1]]]
     return ret




def reshapeGeojson(geoidType, infile, outfile):

    with open("{file}".format(file = infile),"r") as f:
        inData = json.load(f)["features"]

    # set the name of the field that should be used as the key for looking up
    # the geo's bounding box
    geoidKey = "geo_id"

    #iterate over the features in the geojson
    outData = {}
    for d in inData:
        coords = d["geometry"]["coordinates"]
        geoid = d["properties"][geoidKey]
        properties = {} # only want to keep original geo ID, geo name, mapbox geo ID, and geo type (PC or region)

        if geoidType == "pc":
            properties["geo_id"] = d["properties"]["geo_id"]
            properties["PCON17NM"] = d["properties"]["PCON17NM"]
            properties["mapbox_id"] = d["properties"]["mapbox_id"]
            properties["type"] = "PC"
        elif geoidType == "region":
            properties["geo_id"] = d["properties"]["geo_id"]
            properties["nuts118nm"] = d["properties"]["nuts118nm"]
            properties["mapbox_id"] = d["properties"]["mapbox_id"]
            properties["type"] = "Region"

        # some coordinates are multipolygons (e.g. islands)
        # for bounding boxes, bb should be for the largest polygon
            # to improve, could figure out bb of all multipolygons, although I don't see it being a big issue (see below)

        # note that the majority of these features are single polygons (not multi), so this is a bit of extraneous code
        # could skip most of it w/ a simple length == 1 check. That being said it's plenty fast, so no big deal.
        bboxes = []
        areas = []
        for coord in coords:
        # get the bounding boxes for each polygon in the multipolygon
            poly = geojson.Polygon(coord)
            bb = bbox(list(geojson.utils.coords(poly)))
            bboxes.append(bb)
        for bb in bboxes:
        # for each bounding box calculate the area
            area = abs(bb[0][0] - bb[1][0])*abs(bb[0][1] - bb[1][1])
            areas.append(area)
        ind = areas.index(max(areas))

        # this is just a smell test to see if we're alright using the largest polygon in the multipolygon for the bb
        ratios = sorted(list(set(map(lambda a: a / areas[ind], areas) )), reverse=True)
        if(len(ratios) > 1 and ratios[1] > .1):
            print("2nd largest polygon area is %10f percent of largest area in %s %s"%(ratios[1]*100.0, geoidType, geoid))

        # the index of the largest bounding box is the same as the index of the largest area
        bounds = bboxes[ind]


        # check for duplicate id's just in case (none exist)
        if(geoid in outData):
            print("Warning: duplicate id found for %s %s"%(geoidType, geoid))
        else:
        # Write the bounding box as well as the properties object to the reshaped geojson, with geoids as
        # keys. The new key/val structure allows for rapid lookups (instead of filtering), the bboxes are used for
        # zooming in, and the properties are used in a few places (e.g. to populate the selected county/cbsa bar charts)
        # when user mouses out the map, with a county/cbsa selected
            outData[geoid] = {"bounds": bounds, "properties": properties}

    with open("{file}".format(file = outfile),"w") as f:
        json.dump(outData, f)

if __name__ == "__main__":
    reshapeGeojson("pc", "pcs-id.json", "pcs_bboxes.json")
    reshapeGeojson("region", "regions-id.json", "regions_bboxes.json")